#!/bin/bash

set -ex

. /root/config/chroot

# Disable terminal ads
pro config set apt_news=false

# Disable apport bug reporting
sed -i 's/enabled=1/enabled=0/g' /etc/default/apport

# Remove release upgrade motd
rm -f /var/lib/ubuntu-release-upgrader/release-upgrade-available
sed -i 's/Prompt=.*/Prompt=never/g' /etc/update-manager/release-upgrades

# Let systemd create machine id on first boot
rm -f /var/lib/dbus/machine-id
true > /etc/machine-id 

# Add video group to new users
sed -i 's/#EXTRA_GROUPS=.*/EXTRA_GROUPS="video"/g' /etc/adduser.conf
sed -i 's/#ADD_EXTRA_GROUPS=.*/ADD_EXTRA_GROUPS=1/g' /etc/adduser.conf

# Remove some packages
DEBIAN_FRONTEND=noninteractive apt-get --purge remove --assume-yes flash-kernel fwupd 

# Specific ubuntu-image chroot configuration goes here.
if [ "$SUBPROJECT" == "desktop-preinstalled" ]; then
    DEBIAN_FRONTEND=noninteractive apt-get install --assume-yes oem-config-gtk openssh-server cloud-initramfs-growroot ubiquity-frontend-gtk ubiquity-slideshow-ubuntu libparted2t64 gstreamer1.0-rockchip1 chromium-browser libv4l-rkmpp
    # Default kernel cmdline
    echo "rootwait rw console=ttyS2,1500000 console=tty1 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory quiet splash plymouth.ignore-serial-consoles" > /etc/kernel/cmdline
    ssh-keygen -A
    # Create files/dirs Ubiquity requires
    mkdir -p /var/log/installer
    touch /var/log/installer/debug
    touch /var/log/syslog
    chown syslog:adm /var/log/syslog

    # Create the oem user account only if it doesn't already exist
    if ! id "oem" &>/dev/null; then
        /usr/sbin/useradd -d /home/oem -G adm,sudo -m -N -u 29999 oem
        /usr/sbin/oem-config-prepare --quiet
        touch "/var/lib/oem-config/run"
    fi

    # Enable wayland session
    sed -i 's/#WaylandEnable=false/WaylandEnable=true/g' /etc/gdm3/custom.conf

    # Have plymouth use the framebuffer
    mkdir -p /etc/initramfs-tools/conf-hooks.d
    echo "if which plymouth >/dev/null 2>&1; then" > /etc/initramfs-tools/conf-hooks.d/plymouth
    echo "    FRAMEBUFFER=y" >> /etc/initramfs-tools/conf-hooks.d/plymouth
    echo "fi" >> /etc/initramfs-tools/conf-hooks.d/plymouth

# Set chromium inital prefrences
mkdir -p /usr/lib/chromium-browser
cat << EOF > /usr/lib/chromium-browser/initial_preferences
{
    "distribution": {
       "import_bookmarks": false,
       "skip_first_run_ui": true,
       "show_welcome_page": false,
       "suppress_first_run_default_browser_prompt": true,
       "suppress_first_run_bubble": true,
       "make_chrome_default": false,
       "make_chrome_default_for_user": false,
       "create_all_shortcuts": true
    },
    "first_run_tabs": [
       "https://www.google.com"
    ],
    "browser": {
       "show_home_button": true,
       "check_default_browser" : false,
       "custom_chrome_frame": true
    },
    "bookmark_bar": {
       "show_on_all_tabs": true
    },
    "safebrowsing": {
      "enabled": false
    },
    "alternate_error_pages": {
      "enabled": false
    },
    "homepage": "https://www.google.com"
}
EOF

# Set chromium default launch args
mkdir -p /usr/lib/chromium-browser
mkdir -p /etc/chromium-browser
cat << EOF > /etc/chromium-browser/default
# Default settings for chromium-browser. This file is sourced by /bin/sh from
# /usr/bin/chromium-browser

# Options to pass to chromium-browser
CHROMIUM_FLAGS="--use-gl=egl"
EOF

# Add chromium to favorites bar
mkdir -p /etc/dconf/db/local.d
cat << EOF > /etc/dconf/db/local.d/00-favorite-apps
[org/gnome/shell]
favorite-apps=['ubiquity.desktop', 'chromium-browser.desktop', 'thunderbird.desktop', 'org.gnome.Nautilus.desktop', 'rhythmbox.desktop', 'libreoffice-writer.desktop', 'snap-store_ubuntu-software.desktop', 'yelp.desktop']
EOF

mkdir -p /etc/dconf/profile
cat << EOF > /etc/dconf/profile/user
user-db:user
system-db:local
EOF
dconf update

cat << EOF > /usr/share/applications/mimeapps.list
[Default Applications]
text/html=chromium-browser.desktop
x-scheme-handler/http=chromium-browser.desktop
x-scheme-handler/https=chromium-browser.desktop
x-scheme-handler/about=chromium-browser.desktop
x-scheme-handler/unknown=chromium-browser.desktop
video/x-ogm+ogg=mpv.desktop
video/mpeg=mpv.desktop
video/x-mpeg2=mpv.desktop
video/x-mpeg3=mpv.desktop
video/mp4v-es=mpv.desktop
video/x-m4v=mpv.desktop
video/mp4=mpv.desktop
video/divx=mpv.desktop
video/vnd.divx=mpv.desktop
video/msvideo=mpv.desktop
video/x-msvideo=mpv.desktop
video/ogg=mpv.desktop
video/quicktime=mpv.desktop
video/vnd.rn-realvideo=mpv.desktop
video/x-ms-afs=mpv.desktop
video/x-ms-asf=mpv.desktop
video/x-ms-wmv=mpv.desktop
video/x-ms-wmx=mpv.desktop
video/x-ms-wvxvideo=mpv.desktop
video/x-avi=mpv.desktop
video/avi=mpv.desktop
video/x-flic=mpv.desktop
video/fli=mpv.desktop
video/x-flc=mpv.desktop
video/flv=mpv.desktop
video/x-flv=mpv.desktop
video/x-theora=mpv.desktop
video/x-theora+ogg=mpv.desktop
video/x-matroska=mpv.desktop
video/mkv=mpv.desktop
video/webm=mpv.desktop
video/x-ogm=mpv.desktop
video/mp2t=mpv.desktop
video/vnd.mpegurl=mpv.desktop
video/3gp=mpv.desktop
video/3gpp=mpv.desktop
video/3gpp2=mpv.desktop
video/dv=mpv.desktop

[Added Associations]
video/mpeg=mpv.desktop;
video/x-mpeg2=mpv.desktop;
video/x-mpeg3=mpv.desktop;
video/mp4v-es=mpv.desktop;
video/x-m4v=mpv.desktop;
video/mp4=mpv.desktop;
video/divx=mpv.desktop;
video/vnd.divx=mpv.desktop;
video/msvideo=mpv.desktop;
video/x-msvideo=mpv.desktop;
video/ogg=mpv.desktop;
video/quicktime=mpv.desktop;
video/vnd.rn-realvideo=mpv.desktop;
video/x-ms-afs=mpv.desktop;
video/x-ms-asf=mpv.desktop;
video/x-ms-wmv=mpv.desktop;
video/x-ms-wmx=mpv.desktop;
video/x-ms-wvxvideo=mpv.desktop;
video/x-avi=mpv.desktop;
video/avi=mpv.desktop;
video/x-flic=mpv.desktop;
video/fli=mpv.desktop;
video/x-flc=mpv.desktop;
video/flv=mpv.desktop;
video/x-flv=mpv.desktop;
video/x-theora=mpv.desktop;
video/x-theora+ogg=mpv.desktop;
video/x-matroska=mpv.desktop;
video/mkv=mpv.desktop;
video/webm=mpv.desktop;
video/x-ogm=mpv.desktop;
video/mp2t=mpv.desktop;
video/vnd.mpegurl=mpv.desktop;
video/3gp=mpv.desktop;
video/3gpp=mpv.desktop;
video/3gpp2=mpv.desktop;
video/dv=mpv.desktop;
EOF


else
    # Default kernel cmdline
    echo "rootwait rw console=ttyS2,1500000 console=tty1 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory" > /etc/kernel/cmdline
sed -i 's/ENABLED=1/ENABLED=0/g' /etc/default/motd-news

    # Configure cloud-init for NoCloud
    mkdir -p /etc/cloud/cloud.cfg.d
    cat << EOF > /etc/cloud/cloud.cfg.d/99-fake_cloud.cfg
datasource_list: [ NoCloud, None ]
datasource:
  NoCloud:
    fs_label: CIDATA
EOF

    # Wait for cloud-init to finish (creating users, etc.) before running getty
    mkdir -p /etc/systemd/system/cloud-config.service.d
    cat << EOF > /etc/systemd/system/cloud-config.service.d/getty-wait.conf
[Unit]
Before=getty.target
EOF

    # Remove 120 second network delay
    mkdir -p /etc/systemd/system/systemd-networkd-wait-online.service.d/
    cat << EOF > /etc/systemd/system/systemd-networkd-wait-online.service.d/override.conf
[Service]
ExecStart=
ExecStart=/lib/systemd/systemd-networkd-wait-online --timeout=10
EOF
fi

# Add units for a 1GiB swapfile, generated on first boot
cat << EOF > /lib/systemd/system/mkswap.service
[Unit]
Description=Create the default swapfile
DefaultDependencies=no
Requires=local-fs.target
After=local-fs.target
Before=swapfile.swap
ConditionPathExists=!/swapfile

[Service]
Type=oneshot
ExecStartPre=fallocate -l 1GiB /swapfile
ExecStartPre=chmod 600 /swapfile
ExecStart=mkswap /swapfile

[Install]
WantedBy=swap.target
EOF

cat << EOF > /lib/systemd/system/swapfile.swap
[Unit]
Description=The default swapfile

[Swap]
What=/swapfile
EOF
mkdir -p /lib/systemd/system/swap.target.wants
ln -s ../mkswap.service /lib/systemd/system/swap.target.wants/
ln -s ../swapfile.swap /lib/systemd/system/swap.target.wants/
 
# Set CPU governor to performance
cat << EOF > /lib/systemd/system/cpu-governor-performance.service
[Unit]
Description=Set CPU governor to performance

[Service]
ExecStart=/usr/bin/bash -c 'echo performance | tee /sys/bus/cpu/devices/cpu*/cpufreq/scaling_governor > /dev/null || true'
Type=oneshot

[Install]
WantedBy=default.target
EOF
systemctl enable cpu-governor-performance

# Set GPU governor to performance
cat << EOF > /lib/systemd/system/gpu-governor-performance.service
[Unit]
Description=Set GPU governor to performance

[Service]
ExecStart=/usr/bin/bash -c 'echo performance > /sys/devices/platform/fb000000.gpu/devfreq/fb000000.gpu/governor || true'
Type=oneshot

[Install]
WantedBy=default.target
EOF
systemctl enable gpu-governor-performance

# Override u-boot-menu config  
mkdir -p /usr/share/u-boot-menu/conf.d
cat << EOF > /usr/share/u-boot-menu/conf.d/ubuntu.conf
U_BOOT_PROMPT="1"
U_BOOT_PARAMETERS="\$(cat /etc/kernel/cmdline)"
U_BOOT_TIMEOUT="10"
EOF
